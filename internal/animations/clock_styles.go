package animations

// ClockStyleDigits defines the ASCII representation of digits for different clock styles
// Each style maps characters to their multi-line ASCII representation
var ClockStyleDigits = map[string]map[rune][]string{
	"kompaktblk": {
		'0': {
			"▄▀▀█▄ ",
			"█▄▀ █ ",
			" ▀▀▀  ",
		},
		'1': {
			" ▄█   ",
			"  █   ",
			"▀▀▀▀▀ ",
		},
		'2': {
			"▀▀▀▀█ ",
			"█▀▀▀▀ ",
			"▀▀▀▀▀ ",
		},
		'3': {
			"▀▀▀▀▄ ",
			"  ▀▀▄ ",
			"▀▀▀▀  ",
		},
		'4': {
			"█   █ ",
			"▀▀▀▀█ ",
			"    ▀ ",
		},
		'5': {
			"█▀▀▀▀ ",
			"▀▀▀▀█ ",
			"▀▀▀▀▀ ",
		},
		'6': {
			"█▀▀▀▀ ",
			"█▀▀▀█ ",
			"▀▀▀▀▀ ",
		},
		'7': {
			"▀▀▀▀█ ",
			"   █▀ ",
			"   ▀  ",
		},
		'8': {
			"█▀▀▀█ ",
			"█▀▀▀█ ",
			"▀▀▀▀▀ ",
		},
		'9': {
			"█▀▀▀█ ",
			"▀▀▀▀█ ",
			"▀▀▀▀▀ ",
		},
		':': {
			"  ▄   ",
			"  ▄   ",
			"      ",
		},
		' ': {
			"      ",
			"      ",
			"      ",
		},
		'A': {
			"▄▀▀▀▄ ",
			"█▀▀▀█ ",
			"▀   ▀ ",
		},
		'M': {
			"█▀▄▀█ ",
			"█   █ ",
			"▀   ▀ ",
		},
		'P': {
			"█▀▀▀▄ ",
			"█▀▀▀  ",
			"▀     ",
		},
	},
	"phmvga": {
		'0': {
			"𜷡𜵷𜶚▖",
			"𜴅𜴫𜴖𜺨",
		},
		'1': {
			" 𜶛▌ ",
			"𜴘𜴱𜴬𜴉",
		},
		'2': {
			"𜴈𜵳𜷖🯦",
			"𜴯𜴮𜴯🯦",
		},
		'3': {
			"𜴈𜶮𜷖🯦",
			"𜴣𜴧𜴱▘",
		},
		'4': {
			"𜷋𜴖█ ",
			"🮂𜴛🮅𜴊",
		},
		'5': {
			"█𜶮𜶮𜺨",
			"𜴣𜴧𜴱▘",
		},
		'6': {
			"𜷡𜶲𜶬 ",
			"𜴦𜴧𜴱▘",
		},
		'7': {
			"▀𜵳𜵬▘",
			" 🮅  ",
		},
		'8': {
			"𜶪𜶮𜷖🯦",
			"𜴦𜴧𜴱▘",
		},
		'9': {
			"𜶪𜶮𜷖𜵈",
			"𜴘𜴧𜴖𜺨",
		},
		':': {
			" 🯧🯦 ",
			" 🯧🯦 ",
		},
		' ': {
			"    ",
			"    ",
		},
		'A': {
			"𜷡𜶲𜷘▖",
			"🮅 𜴡𜴍",
		},
		'M': {
			"█𜷞𜷥▌",
			"🮅𜺫𜴡𜴍",
		},
		'P': {
			"𜶘𜷂𜷖🯦",
			"𜴱𜴬  ",
		},
	},
	"phm_slanted": {
		'0': {
			"   🭊🭂██🭍🬾",
			"  🭋█🭛🭈🭆█🭛",
			"  🭅█🭂🭞█🭡 ",
			" 🭋█🭜🭘🭋█🭛 ",
			" 🭤🭓██🭞🭚  ",
			"         ",
		},
		'1': {
			"    🭈🭃🭡 ",
			"  🭋███🭛 ",
			"    🭅🭡  ",
			"   🭋█🭛  ",
			" 🭅████🭡 ",
			"        ",
		},
		'2': {
			"  🭊🭂███🭍🬾",
			"  🭣🭘🭇🭄█🭠🭗",
			"   🭊🭁🭝🭚  ",
			" 🭇🭄█🭠🭗   ",
			" 🭅████🭡  ",
			"         ",
		},
		'3': {
			"   🭅███🭍🬾",
			"      🭋█🭛",
			"   🭋███🭪 ",
			"      🭅🭡 ",
			" 🭅████🭞🭙 ",
			"         ",
		},
		'4': {
			"   🭅🭡  🭅🭡",
			"  🭋█🭛 🭋█🭛",
			"  🭅█████🭛",
			"     🭋█🭛 ",
			"     🭅🭡  ",
			"         ",
		},
		'5': {
			"   🭅████🭛",
			"  🭋█🭛    ",
			"  🭅███🭍🬾 ",
			"     🭋█🭛 ",
			" 🭅███🭞🭚  ",
			"         ",
		},
		'6': {
			"   🭊🭂███🭛",
			"  🭋█🭛    ",
			"  🭅███🭍🬾 ",
			" 🭋█🭛 🭋█🭛 ",
			" 🭤🭓██🭞🭚  ",
			"         ",
		},
		'7': {
			"  🭅█████🭡",
			"     🭊🭁🭠🭗",
			"   🭇🭄🭝🭚  ",
			"  🭊🭁🭠🭗   ",
			"🭇🭄🭝🭚     ",
			"         ",
		},
		'8': {
			"   🭉🭂██🭍🬾",
			"   🭅🭡 🭋█🭛",
			"  🭊████🭪 ",
			" 🭋█🭛  🭅🭡 ",
			" 🭤🭓███🭞🭙 ",
			"         ",
		},
		'9': {
			"   🭊🭂██🭍🬾",
			"  🭋█🭛 🭋█🭛",
			"  🭤🭓███🭡 ",
			"     🭋█🭛 ",
			" 🭋███🭞🭚  ",
			"         ",
		},
		':': {
			"     ",
			"   🭅🭡",
			"     ",
			"  🭅🭡 ",
			"     ",
			"     ",
		},
		' ': {
			"    ",
			"    ",
			"    ",
			"    ",
			"    ",
			"    ",
		},
		'A': {
			"   🭊🭂██🭍🬾",
			"  🭋█🭛 🭋█🭛",
			"  🭅████🭡 ",
			" 🭋█🭛 🭋█🭛 ",
			" 🭅🭡  🭅🭡  ",
			"         ",
		},
		'M': {
			"   🭅🭐  🭇🭄🭡",
			"  🭋██🭀🭊🭁█🭛",
			"  🭅🭟🭔█🭠█🭡 ",
			" 🭋█🭛🭤🭚🭋█🭛 ",
			" 🭅🭡   🭅🭡  ",
			"          ",
		},
		'P': {
			"   🭅███🭍🬾",
			"  🭋█🭛 🭋█🭛",
			"  🭅███🭞🭚 ",
			" 🭋█🭛     ",
			" 🭅🭡      ",
			"         ",
		},
	},
	"phm_blocky_reverse": {
		'0': {
			"████",
			"▀▄▀█",
			"▄▀▄█",
			"████",
		},
		'1': {
			"███",
			"▀ █",
			"█ █",
			"███",
		},
		'2': {
			"████",
			"▄■ █",
			" ▀▀█",
			"████",
		},
		'3': {
			"████",
			"▄■ █",
			"▀■ █",
			"████",
		},
		'4': {
			"████",
			"▐ ██",
			"▄ ▄█",
			"████",
		},
		'5': {
			"████",
			" ▄▄█",
			"▀■ █",
			"████",
		},
		'6': {
			"████",
			"▀▄▄█",
			" ■ █",
			"████",
		},
		'7': {
			"████",
			"▄■ █",
			"█▌▐█",
			"████",
		},
		'8': {
			"████",
			" ■ █",
			" ■ █",
			"████",
		},
		'9': {
			"████",
			" ■ █",
			"▀▀▄█",
			"████",
		},
		':': {
			"██",
			"▀█",
			"▀█",
			"██",
		},
		' ': {
			"██",
			"██",
			"██",
			"██",
		},
		'A': {
			"████",
			"▌▄▐█",
			" ▄ █",
			"████",
		},
		'M': {
			"█████",
			" ▐▌ █",
			" ▌▐ █",
			"█████",
		},
		'P': {
			"████",
			" ■ █",
			" ███",
			"████",
		},
	},
	"plain": nil,
}

// GetClockStyleDigits returns the digit map for a given clock style
func GetClockStyleDigits(style string) map[rune][]string {
	if digits, exists := ClockStyleDigits[style]; exists {
		return digits
	}
	// Default to kompaktblk if style not found
	return ClockStyleDigits["kompaktblk"]
}
